/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apaf.NJournal.TestModel.Model
{

  [Serializable]
  public partial class Trade : TBase
  {
    private long _timestamp;
    private string _sym;
    private double _price;
    private int _size;
    private int _stop;
    private string _cond;
    private string _ex;

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public string Sym
    {
      get
      {
        return _sym;
      }
      set
      {
        __isset.sym = true;
        this._sym = value;
      }
    }

    public double Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }

    public int Stop
    {
      get
      {
        return _stop;
      }
      set
      {
        __isset.stop = true;
        this._stop = value;
      }
    }

    public string Cond
    {
      get
      {
        return _cond;
      }
      set
      {
        __isset.cond = true;
        this._cond = value;
      }
    }

    public string Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool timestamp;
      public bool sym;
      public bool price;
      public bool size;
      public bool stop;
      public bool cond;
      public bool ex;
    }

    public Trade() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Sym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Price = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Size = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Stop = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Cond = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Ex = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Trade");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (Sym != null && __isset.sym) {
        field.Name = "sym";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sym);
        oprot.WriteFieldEnd();
      }
      if (__isset.price) {
        field.Name = "price";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Price);
        oprot.WriteFieldEnd();
      }
      if (__isset.size) {
        field.Name = "size";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Size);
        oprot.WriteFieldEnd();
      }
      if (__isset.stop) {
        field.Name = "stop";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Stop);
        oprot.WriteFieldEnd();
      }
      if (Cond != null && __isset.cond) {
        field.Name = "cond";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Cond);
        oprot.WriteFieldEnd();
      }
      if (Ex != null && __isset.ex) {
        field.Name = "ex";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ex);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Trade(");
      sb.Append("Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Sym: ");
      sb.Append(Sym);
      sb.Append(",Price: ");
      sb.Append(Price);
      sb.Append(",Size: ");
      sb.Append(Size);
      sb.Append(",Stop: ");
      sb.Append(Stop);
      sb.Append(",Cond: ");
      sb.Append(Cond);
      sb.Append(",Ex: ");
      sb.Append(Ex);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
