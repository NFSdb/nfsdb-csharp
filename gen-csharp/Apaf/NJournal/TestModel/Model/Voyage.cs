/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apaf.NJournal.TestModel.Model
{

  [Serializable]
  public partial class Voyage : TBase
  {
    private string _id;
    private string _vesselID;
    private string _benchName;
    private string _voyageStatusName;
    private long _loadDate;
    private long _dischargeDate;
    private string _gradeId;
    private string _gradeName;
    private string _gradeGroupName;
    private double _conversionRate;
    private string _crudeDensity;
    private string _sweetSour;
    private string _subGradeGroupName;
    private double _kt;
    private double _bbls;
    private string _rate;
    private string _charterer;
    private string _endReceiver;
    private string _seller;
    private string _broker;
    private string _supplier;
    private string _chain;
    private string _buyer;
    private long _openLaycan;
    private long _closeLaycan;
    private string _primaryVoyageID;
    private string _updatedUser;
    private long _timestamp;
    private string _streamName;
    private int _deleted;
    private string _source;
    private string _duplicate;
    private string _aliasVoyageId;
    private string _loadRefineryID;
    private string _disRefineryID;
    private double _C3;
    private double _C4;
    private double _LPG;
    private string _loadPlaceID;
    private string _loadPlaceType;
    private string _loadPlaceName;
    private string _loadPortName;
    private string _loadTerminalName;
    private string _loadCountryName;
    private string _loadRegionName;
    private string _loadAltRegionName;
    private string _loadRegionGroupName;
    private string _loadEconomicGroup;
    private string _destPlaceID;
    private string _destPlaceType;
    private string _destPlaceName;
    private string _destPortName;
    private string _destTerminalName;
    private string _destCountryName;
    private string _destRegionName;
    private string _destAltRegionName;
    private string _destRegionGroupName;
    private string _destEconomicGroup;
    private string _comment;
    private int _sharepointID;
    private long _createdDate;
    private string _createdUser;
    private double _billOfLading;
    private string __use;
    private string _arrivalJTW;
    private string _offerLevel;
    private string _jetVetting;
    private string _dwt;
    private string _shipName;
    private string _route;
    private string _pastSuez;
    private string _arb;
    private string _dataOrigin;
    private string _options;
    private string _opec;
    private string _loadRefineryName;
    private string _dischargeRefineryName;
    private string _notes;
    private long _loadDOE;
    private string _loadMonth;
    private int _loadWeek;
    private long _disDOE;
    private string _disMonth;
    private int _disWeek;
    private long _numLoadMonth;
    private long _numDisMonth;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public string VesselID
    {
      get
      {
        return _vesselID;
      }
      set
      {
        __isset.vesselID = true;
        this._vesselID = value;
      }
    }

    public string BenchName
    {
      get
      {
        return _benchName;
      }
      set
      {
        __isset.benchName = true;
        this._benchName = value;
      }
    }

    public string VoyageStatusName
    {
      get
      {
        return _voyageStatusName;
      }
      set
      {
        __isset.voyageStatusName = true;
        this._voyageStatusName = value;
      }
    }

    public long LoadDate
    {
      get
      {
        return _loadDate;
      }
      set
      {
        __isset.loadDate = true;
        this._loadDate = value;
      }
    }

    public long DischargeDate
    {
      get
      {
        return _dischargeDate;
      }
      set
      {
        __isset.dischargeDate = true;
        this._dischargeDate = value;
      }
    }

    public string GradeId
    {
      get
      {
        return _gradeId;
      }
      set
      {
        __isset.gradeId = true;
        this._gradeId = value;
      }
    }

    public string GradeName
    {
      get
      {
        return _gradeName;
      }
      set
      {
        __isset.gradeName = true;
        this._gradeName = value;
      }
    }

    public string GradeGroupName
    {
      get
      {
        return _gradeGroupName;
      }
      set
      {
        __isset.gradeGroupName = true;
        this._gradeGroupName = value;
      }
    }

    public double ConversionRate
    {
      get
      {
        return _conversionRate;
      }
      set
      {
        __isset.conversionRate = true;
        this._conversionRate = value;
      }
    }

    public string CrudeDensity
    {
      get
      {
        return _crudeDensity;
      }
      set
      {
        __isset.crudeDensity = true;
        this._crudeDensity = value;
      }
    }

    public string SweetSour
    {
      get
      {
        return _sweetSour;
      }
      set
      {
        __isset.sweetSour = true;
        this._sweetSour = value;
      }
    }

    public string SubGradeGroupName
    {
      get
      {
        return _subGradeGroupName;
      }
      set
      {
        __isset.subGradeGroupName = true;
        this._subGradeGroupName = value;
      }
    }

    public double Kt
    {
      get
      {
        return _kt;
      }
      set
      {
        __isset.kt = true;
        this._kt = value;
      }
    }

    public double Bbls
    {
      get
      {
        return _bbls;
      }
      set
      {
        __isset.bbls = true;
        this._bbls = value;
      }
    }

    public string Rate
    {
      get
      {
        return _rate;
      }
      set
      {
        __isset.rate = true;
        this._rate = value;
      }
    }

    public string Charterer
    {
      get
      {
        return _charterer;
      }
      set
      {
        __isset.charterer = true;
        this._charterer = value;
      }
    }

    public string EndReceiver
    {
      get
      {
        return _endReceiver;
      }
      set
      {
        __isset.endReceiver = true;
        this._endReceiver = value;
      }
    }

    public string Seller
    {
      get
      {
        return _seller;
      }
      set
      {
        __isset.seller = true;
        this._seller = value;
      }
    }

    public string Broker
    {
      get
      {
        return _broker;
      }
      set
      {
        __isset.broker = true;
        this._broker = value;
      }
    }

    public string Supplier
    {
      get
      {
        return _supplier;
      }
      set
      {
        __isset.supplier = true;
        this._supplier = value;
      }
    }

    public string Chain
    {
      get
      {
        return _chain;
      }
      set
      {
        __isset.chain = true;
        this._chain = value;
      }
    }

    public string Buyer
    {
      get
      {
        return _buyer;
      }
      set
      {
        __isset.buyer = true;
        this._buyer = value;
      }
    }

    public long OpenLaycan
    {
      get
      {
        return _openLaycan;
      }
      set
      {
        __isset.openLaycan = true;
        this._openLaycan = value;
      }
    }

    public long CloseLaycan
    {
      get
      {
        return _closeLaycan;
      }
      set
      {
        __isset.closeLaycan = true;
        this._closeLaycan = value;
      }
    }

    public string PrimaryVoyageID
    {
      get
      {
        return _primaryVoyageID;
      }
      set
      {
        __isset.primaryVoyageID = true;
        this._primaryVoyageID = value;
      }
    }

    public string UpdatedUser
    {
      get
      {
        return _updatedUser;
      }
      set
      {
        __isset.updatedUser = true;
        this._updatedUser = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public string StreamName
    {
      get
      {
        return _streamName;
      }
      set
      {
        __isset.streamName = true;
        this._streamName = value;
      }
    }

    public int Deleted
    {
      get
      {
        return _deleted;
      }
      set
      {
        __isset.deleted = true;
        this._deleted = value;
      }
    }

    public string Source
    {
      get
      {
        return _source;
      }
      set
      {
        __isset.source = true;
        this._source = value;
      }
    }

    public string Duplicate
    {
      get
      {
        return _duplicate;
      }
      set
      {
        __isset.duplicate = true;
        this._duplicate = value;
      }
    }

    public string AliasVoyageId
    {
      get
      {
        return _aliasVoyageId;
      }
      set
      {
        __isset.aliasVoyageId = true;
        this._aliasVoyageId = value;
      }
    }

    public string LoadRefineryID
    {
      get
      {
        return _loadRefineryID;
      }
      set
      {
        __isset.loadRefineryID = true;
        this._loadRefineryID = value;
      }
    }

    public string DisRefineryID
    {
      get
      {
        return _disRefineryID;
      }
      set
      {
        __isset.disRefineryID = true;
        this._disRefineryID = value;
      }
    }

    public double C3
    {
      get
      {
        return _C3;
      }
      set
      {
        __isset.C3 = true;
        this._C3 = value;
      }
    }

    public double C4
    {
      get
      {
        return _C4;
      }
      set
      {
        __isset.C4 = true;
        this._C4 = value;
      }
    }

    public double LPG
    {
      get
      {
        return _LPG;
      }
      set
      {
        __isset.LPG = true;
        this._LPG = value;
      }
    }

    public string LoadPlaceID
    {
      get
      {
        return _loadPlaceID;
      }
      set
      {
        __isset.loadPlaceID = true;
        this._loadPlaceID = value;
      }
    }

    public string LoadPlaceType
    {
      get
      {
        return _loadPlaceType;
      }
      set
      {
        __isset.loadPlaceType = true;
        this._loadPlaceType = value;
      }
    }

    public string LoadPlaceName
    {
      get
      {
        return _loadPlaceName;
      }
      set
      {
        __isset.loadPlaceName = true;
        this._loadPlaceName = value;
      }
    }

    public string LoadPortName
    {
      get
      {
        return _loadPortName;
      }
      set
      {
        __isset.loadPortName = true;
        this._loadPortName = value;
      }
    }

    public string LoadTerminalName
    {
      get
      {
        return _loadTerminalName;
      }
      set
      {
        __isset.loadTerminalName = true;
        this._loadTerminalName = value;
      }
    }

    public string LoadCountryName
    {
      get
      {
        return _loadCountryName;
      }
      set
      {
        __isset.loadCountryName = true;
        this._loadCountryName = value;
      }
    }

    public string LoadRegionName
    {
      get
      {
        return _loadRegionName;
      }
      set
      {
        __isset.loadRegionName = true;
        this._loadRegionName = value;
      }
    }

    public string LoadAltRegionName
    {
      get
      {
        return _loadAltRegionName;
      }
      set
      {
        __isset.loadAltRegionName = true;
        this._loadAltRegionName = value;
      }
    }

    public string LoadRegionGroupName
    {
      get
      {
        return _loadRegionGroupName;
      }
      set
      {
        __isset.loadRegionGroupName = true;
        this._loadRegionGroupName = value;
      }
    }

    public string LoadEconomicGroup
    {
      get
      {
        return _loadEconomicGroup;
      }
      set
      {
        __isset.loadEconomicGroup = true;
        this._loadEconomicGroup = value;
      }
    }

    public string DestPlaceID
    {
      get
      {
        return _destPlaceID;
      }
      set
      {
        __isset.destPlaceID = true;
        this._destPlaceID = value;
      }
    }

    public string DestPlaceType
    {
      get
      {
        return _destPlaceType;
      }
      set
      {
        __isset.destPlaceType = true;
        this._destPlaceType = value;
      }
    }

    public string DestPlaceName
    {
      get
      {
        return _destPlaceName;
      }
      set
      {
        __isset.destPlaceName = true;
        this._destPlaceName = value;
      }
    }

    public string DestPortName
    {
      get
      {
        return _destPortName;
      }
      set
      {
        __isset.destPortName = true;
        this._destPortName = value;
      }
    }

    public string DestTerminalName
    {
      get
      {
        return _destTerminalName;
      }
      set
      {
        __isset.destTerminalName = true;
        this._destTerminalName = value;
      }
    }

    public string DestCountryName
    {
      get
      {
        return _destCountryName;
      }
      set
      {
        __isset.destCountryName = true;
        this._destCountryName = value;
      }
    }

    public string DestRegionName
    {
      get
      {
        return _destRegionName;
      }
      set
      {
        __isset.destRegionName = true;
        this._destRegionName = value;
      }
    }

    public string DestAltRegionName
    {
      get
      {
        return _destAltRegionName;
      }
      set
      {
        __isset.destAltRegionName = true;
        this._destAltRegionName = value;
      }
    }

    public string DestRegionGroupName
    {
      get
      {
        return _destRegionGroupName;
      }
      set
      {
        __isset.destRegionGroupName = true;
        this._destRegionGroupName = value;
      }
    }

    public string DestEconomicGroup
    {
      get
      {
        return _destEconomicGroup;
      }
      set
      {
        __isset.destEconomicGroup = true;
        this._destEconomicGroup = value;
      }
    }

    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }

    public int SharepointID
    {
      get
      {
        return _sharepointID;
      }
      set
      {
        __isset.sharepointID = true;
        this._sharepointID = value;
      }
    }

    public long CreatedDate
    {
      get
      {
        return _createdDate;
      }
      set
      {
        __isset.createdDate = true;
        this._createdDate = value;
      }
    }

    public string CreatedUser
    {
      get
      {
        return _createdUser;
      }
      set
      {
        __isset.createdUser = true;
        this._createdUser = value;
      }
    }

    public double BillOfLading
    {
      get
      {
        return _billOfLading;
      }
      set
      {
        __isset.billOfLading = true;
        this._billOfLading = value;
      }
    }

    public string _use
    {
      get
      {
        return __use;
      }
      set
      {
        __isset._use = true;
        this.__use = value;
      }
    }

    public string ArrivalJTW
    {
      get
      {
        return _arrivalJTW;
      }
      set
      {
        __isset.arrivalJTW = true;
        this._arrivalJTW = value;
      }
    }

    public string OfferLevel
    {
      get
      {
        return _offerLevel;
      }
      set
      {
        __isset.offerLevel = true;
        this._offerLevel = value;
      }
    }

    public string JetVetting
    {
      get
      {
        return _jetVetting;
      }
      set
      {
        __isset.jetVetting = true;
        this._jetVetting = value;
      }
    }

    public string Dwt
    {
      get
      {
        return _dwt;
      }
      set
      {
        __isset.dwt = true;
        this._dwt = value;
      }
    }

    public string ShipName
    {
      get
      {
        return _shipName;
      }
      set
      {
        __isset.shipName = true;
        this._shipName = value;
      }
    }

    public string Route
    {
      get
      {
        return _route;
      }
      set
      {
        __isset.route = true;
        this._route = value;
      }
    }

    public string PastSuez
    {
      get
      {
        return _pastSuez;
      }
      set
      {
        __isset.pastSuez = true;
        this._pastSuez = value;
      }
    }

    public string Arb
    {
      get
      {
        return _arb;
      }
      set
      {
        __isset.arb = true;
        this._arb = value;
      }
    }

    public string DataOrigin
    {
      get
      {
        return _dataOrigin;
      }
      set
      {
        __isset.dataOrigin = true;
        this._dataOrigin = value;
      }
    }

    public string Options
    {
      get
      {
        return _options;
      }
      set
      {
        __isset.options = true;
        this._options = value;
      }
    }

    public string Opec
    {
      get
      {
        return _opec;
      }
      set
      {
        __isset.opec = true;
        this._opec = value;
      }
    }

    public string LoadRefineryName
    {
      get
      {
        return _loadRefineryName;
      }
      set
      {
        __isset.loadRefineryName = true;
        this._loadRefineryName = value;
      }
    }

    public string DischargeRefineryName
    {
      get
      {
        return _dischargeRefineryName;
      }
      set
      {
        __isset.dischargeRefineryName = true;
        this._dischargeRefineryName = value;
      }
    }

    public string Notes
    {
      get
      {
        return _notes;
      }
      set
      {
        __isset.notes = true;
        this._notes = value;
      }
    }

    public long LoadDOE
    {
      get
      {
        return _loadDOE;
      }
      set
      {
        __isset.loadDOE = true;
        this._loadDOE = value;
      }
    }

    public string LoadMonth
    {
      get
      {
        return _loadMonth;
      }
      set
      {
        __isset.loadMonth = true;
        this._loadMonth = value;
      }
    }

    public int LoadWeek
    {
      get
      {
        return _loadWeek;
      }
      set
      {
        __isset.loadWeek = true;
        this._loadWeek = value;
      }
    }

    public long DisDOE
    {
      get
      {
        return _disDOE;
      }
      set
      {
        __isset.disDOE = true;
        this._disDOE = value;
      }
    }

    public string DisMonth
    {
      get
      {
        return _disMonth;
      }
      set
      {
        __isset.disMonth = true;
        this._disMonth = value;
      }
    }

    public int DisWeek
    {
      get
      {
        return _disWeek;
      }
      set
      {
        __isset.disWeek = true;
        this._disWeek = value;
      }
    }

    public long NumLoadMonth
    {
      get
      {
        return _numLoadMonth;
      }
      set
      {
        __isset.numLoadMonth = true;
        this._numLoadMonth = value;
      }
    }

    public long NumDisMonth
    {
      get
      {
        return _numDisMonth;
      }
      set
      {
        __isset.numDisMonth = true;
        this._numDisMonth = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool id;
      public bool vesselID;
      public bool benchName;
      public bool voyageStatusName;
      public bool loadDate;
      public bool dischargeDate;
      public bool gradeId;
      public bool gradeName;
      public bool gradeGroupName;
      public bool conversionRate;
      public bool crudeDensity;
      public bool sweetSour;
      public bool subGradeGroupName;
      public bool kt;
      public bool bbls;
      public bool rate;
      public bool charterer;
      public bool endReceiver;
      public bool seller;
      public bool broker;
      public bool supplier;
      public bool chain;
      public bool buyer;
      public bool openLaycan;
      public bool closeLaycan;
      public bool primaryVoyageID;
      public bool updatedUser;
      public bool timestamp;
      public bool streamName;
      public bool deleted;
      public bool source;
      public bool duplicate;
      public bool aliasVoyageId;
      public bool loadRefineryID;
      public bool disRefineryID;
      public bool C3;
      public bool C4;
      public bool LPG;
      public bool loadPlaceID;
      public bool loadPlaceType;
      public bool loadPlaceName;
      public bool loadPortName;
      public bool loadTerminalName;
      public bool loadCountryName;
      public bool loadRegionName;
      public bool loadAltRegionName;
      public bool loadRegionGroupName;
      public bool loadEconomicGroup;
      public bool destPlaceID;
      public bool destPlaceType;
      public bool destPlaceName;
      public bool destPortName;
      public bool destTerminalName;
      public bool destCountryName;
      public bool destRegionName;
      public bool destAltRegionName;
      public bool destRegionGroupName;
      public bool destEconomicGroup;
      public bool comment;
      public bool sharepointID;
      public bool createdDate;
      public bool createdUser;
      public bool billOfLading;
      public bool _use;
      public bool arrivalJTW;
      public bool offerLevel;
      public bool jetVetting;
      public bool dwt;
      public bool shipName;
      public bool route;
      public bool pastSuez;
      public bool arb;
      public bool dataOrigin;
      public bool options;
      public bool opec;
      public bool loadRefineryName;
      public bool dischargeRefineryName;
      public bool notes;
      public bool loadDOE;
      public bool loadMonth;
      public bool loadWeek;
      public bool disDOE;
      public bool disMonth;
      public bool disWeek;
      public bool numLoadMonth;
      public bool numDisMonth;
    }

    public Voyage() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              VesselID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              BenchName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              VoyageStatusName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              LoadDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              DischargeDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              GradeId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              GradeName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              GradeGroupName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Double) {
              ConversionRate = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              CrudeDensity = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              SweetSour = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              SubGradeGroupName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Double) {
              Kt = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Double) {
              Bbls = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              Rate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              Charterer = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.String) {
              EndReceiver = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.String) {
              Seller = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              Broker = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              Supplier = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.String) {
              Chain = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.String) {
              Buyer = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I64) {
              OpenLaycan = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.I64) {
              CloseLaycan = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.String) {
              PrimaryVoyageID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 27:
            if (field.Type == TType.String) {
              UpdatedUser = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 28:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 29:
            if (field.Type == TType.String) {
              StreamName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              Deleted = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.String) {
              Source = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.String) {
              Duplicate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 33:
            if (field.Type == TType.String) {
              AliasVoyageId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 34:
            if (field.Type == TType.String) {
              LoadRefineryID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 35:
            if (field.Type == TType.String) {
              DisRefineryID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 36:
            if (field.Type == TType.Double) {
              C3 = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 37:
            if (field.Type == TType.Double) {
              C4 = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 38:
            if (field.Type == TType.Double) {
              LPG = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 39:
            if (field.Type == TType.String) {
              LoadPlaceID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.String) {
              LoadPlaceType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.String) {
              LoadPlaceName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 42:
            if (field.Type == TType.String) {
              LoadPortName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 43:
            if (field.Type == TType.String) {
              LoadTerminalName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 44:
            if (field.Type == TType.String) {
              LoadCountryName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 45:
            if (field.Type == TType.String) {
              LoadRegionName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 46:
            if (field.Type == TType.String) {
              LoadAltRegionName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 47:
            if (field.Type == TType.String) {
              LoadRegionGroupName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 48:
            if (field.Type == TType.String) {
              LoadEconomicGroup = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 49:
            if (field.Type == TType.String) {
              DestPlaceID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.String) {
              DestPlaceType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 51:
            if (field.Type == TType.String) {
              DestPlaceName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 52:
            if (field.Type == TType.String) {
              DestPortName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 53:
            if (field.Type == TType.String) {
              DestTerminalName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 54:
            if (field.Type == TType.String) {
              DestCountryName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 55:
            if (field.Type == TType.String) {
              DestRegionName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 56:
            if (field.Type == TType.String) {
              DestAltRegionName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 57:
            if (field.Type == TType.String) {
              DestRegionGroupName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 58:
            if (field.Type == TType.String) {
              DestEconomicGroup = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 59:
            if (field.Type == TType.String) {
              Comment = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              SharepointID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 61:
            if (field.Type == TType.I64) {
              CreatedDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 62:
            if (field.Type == TType.String) {
              CreatedUser = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 63:
            if (field.Type == TType.Double) {
              BillOfLading = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 64:
            if (field.Type == TType.String) {
              _use = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 65:
            if (field.Type == TType.String) {
              ArrivalJTW = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 66:
            if (field.Type == TType.String) {
              OfferLevel = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 67:
            if (field.Type == TType.String) {
              JetVetting = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 68:
            if (field.Type == TType.String) {
              Dwt = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 69:
            if (field.Type == TType.String) {
              ShipName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.String) {
              Route = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 71:
            if (field.Type == TType.String) {
              PastSuez = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 72:
            if (field.Type == TType.String) {
              Arb = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 73:
            if (field.Type == TType.String) {
              DataOrigin = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 74:
            if (field.Type == TType.String) {
              Options = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 75:
            if (field.Type == TType.String) {
              Opec = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 76:
            if (field.Type == TType.String) {
              LoadRefineryName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 77:
            if (field.Type == TType.String) {
              DischargeRefineryName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 78:
            if (field.Type == TType.String) {
              Notes = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 79:
            if (field.Type == TType.I64) {
              LoadDOE = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.String) {
              LoadMonth = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 81:
            if (field.Type == TType.I32) {
              LoadWeek = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 82:
            if (field.Type == TType.I64) {
              DisDOE = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 83:
            if (field.Type == TType.String) {
              DisMonth = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 84:
            if (field.Type == TType.I32) {
              DisWeek = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 85:
            if (field.Type == TType.I64) {
              NumLoadMonth = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 86:
            if (field.Type == TType.I64) {
              NumDisMonth = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Voyage");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (VesselID != null && __isset.vesselID) {
        field.Name = "vesselID";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VesselID);
        oprot.WriteFieldEnd();
      }
      if (BenchName != null && __isset.benchName) {
        field.Name = "benchName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BenchName);
        oprot.WriteFieldEnd();
      }
      if (VoyageStatusName != null && __isset.voyageStatusName) {
        field.Name = "voyageStatusName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VoyageStatusName);
        oprot.WriteFieldEnd();
      }
      if (__isset.loadDate) {
        field.Name = "loadDate";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LoadDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.dischargeDate) {
        field.Name = "dischargeDate";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DischargeDate);
        oprot.WriteFieldEnd();
      }
      if (GradeId != null && __isset.gradeId) {
        field.Name = "gradeId";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GradeId);
        oprot.WriteFieldEnd();
      }
      if (GradeName != null && __isset.gradeName) {
        field.Name = "gradeName";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GradeName);
        oprot.WriteFieldEnd();
      }
      if (GradeGroupName != null && __isset.gradeGroupName) {
        field.Name = "gradeGroupName";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(GradeGroupName);
        oprot.WriteFieldEnd();
      }
      if (__isset.conversionRate) {
        field.Name = "conversionRate";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(ConversionRate);
        oprot.WriteFieldEnd();
      }
      if (CrudeDensity != null && __isset.crudeDensity) {
        field.Name = "crudeDensity";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CrudeDensity);
        oprot.WriteFieldEnd();
      }
      if (SweetSour != null && __isset.sweetSour) {
        field.Name = "sweetSour";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SweetSour);
        oprot.WriteFieldEnd();
      }
      if (SubGradeGroupName != null && __isset.subGradeGroupName) {
        field.Name = "subGradeGroupName";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SubGradeGroupName);
        oprot.WriteFieldEnd();
      }
      if (__isset.kt) {
        field.Name = "kt";
        field.Type = TType.Double;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Kt);
        oprot.WriteFieldEnd();
      }
      if (__isset.bbls) {
        field.Name = "bbls";
        field.Type = TType.Double;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Bbls);
        oprot.WriteFieldEnd();
      }
      if (Rate != null && __isset.rate) {
        field.Name = "rate";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Rate);
        oprot.WriteFieldEnd();
      }
      if (Charterer != null && __isset.charterer) {
        field.Name = "charterer";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Charterer);
        oprot.WriteFieldEnd();
      }
      if (EndReceiver != null && __isset.endReceiver) {
        field.Name = "endReceiver";
        field.Type = TType.String;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EndReceiver);
        oprot.WriteFieldEnd();
      }
      if (Seller != null && __isset.seller) {
        field.Name = "seller";
        field.Type = TType.String;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Seller);
        oprot.WriteFieldEnd();
      }
      if (Broker != null && __isset.broker) {
        field.Name = "broker";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Broker);
        oprot.WriteFieldEnd();
      }
      if (Supplier != null && __isset.supplier) {
        field.Name = "supplier";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Supplier);
        oprot.WriteFieldEnd();
      }
      if (Chain != null && __isset.chain) {
        field.Name = "chain";
        field.Type = TType.String;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Chain);
        oprot.WriteFieldEnd();
      }
      if (Buyer != null && __isset.buyer) {
        field.Name = "buyer";
        field.Type = TType.String;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Buyer);
        oprot.WriteFieldEnd();
      }
      if (__isset.openLaycan) {
        field.Name = "openLaycan";
        field.Type = TType.I64;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OpenLaycan);
        oprot.WriteFieldEnd();
      }
      if (__isset.closeLaycan) {
        field.Name = "closeLaycan";
        field.Type = TType.I64;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CloseLaycan);
        oprot.WriteFieldEnd();
      }
      if (PrimaryVoyageID != null && __isset.primaryVoyageID) {
        field.Name = "primaryVoyageID";
        field.Type = TType.String;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PrimaryVoyageID);
        oprot.WriteFieldEnd();
      }
      if (UpdatedUser != null && __isset.updatedUser) {
        field.Name = "updatedUser";
        field.Type = TType.String;
        field.ID = 27;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UpdatedUser);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 28;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (StreamName != null && __isset.streamName) {
        field.Name = "streamName";
        field.Type = TType.String;
        field.ID = 29;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StreamName);
        oprot.WriteFieldEnd();
      }
      if (__isset.deleted) {
        field.Name = "deleted";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Deleted);
        oprot.WriteFieldEnd();
      }
      if (Source != null && __isset.source) {
        field.Name = "source";
        field.Type = TType.String;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Source);
        oprot.WriteFieldEnd();
      }
      if (Duplicate != null && __isset.duplicate) {
        field.Name = "duplicate";
        field.Type = TType.String;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Duplicate);
        oprot.WriteFieldEnd();
      }
      if (AliasVoyageId != null && __isset.aliasVoyageId) {
        field.Name = "aliasVoyageId";
        field.Type = TType.String;
        field.ID = 33;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AliasVoyageId);
        oprot.WriteFieldEnd();
      }
      if (LoadRefineryID != null && __isset.loadRefineryID) {
        field.Name = "loadRefineryID";
        field.Type = TType.String;
        field.ID = 34;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadRefineryID);
        oprot.WriteFieldEnd();
      }
      if (DisRefineryID != null && __isset.disRefineryID) {
        field.Name = "disRefineryID";
        field.Type = TType.String;
        field.ID = 35;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisRefineryID);
        oprot.WriteFieldEnd();
      }
      if (__isset.C3) {
        field.Name = "C3";
        field.Type = TType.Double;
        field.ID = 36;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(C3);
        oprot.WriteFieldEnd();
      }
      if (__isset.C4) {
        field.Name = "C4";
        field.Type = TType.Double;
        field.ID = 37;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(C4);
        oprot.WriteFieldEnd();
      }
      if (__isset.LPG) {
        field.Name = "LPG";
        field.Type = TType.Double;
        field.ID = 38;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(LPG);
        oprot.WriteFieldEnd();
      }
      if (LoadPlaceID != null && __isset.loadPlaceID) {
        field.Name = "loadPlaceID";
        field.Type = TType.String;
        field.ID = 39;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadPlaceID);
        oprot.WriteFieldEnd();
      }
      if (LoadPlaceType != null && __isset.loadPlaceType) {
        field.Name = "loadPlaceType";
        field.Type = TType.String;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadPlaceType);
        oprot.WriteFieldEnd();
      }
      if (LoadPlaceName != null && __isset.loadPlaceName) {
        field.Name = "loadPlaceName";
        field.Type = TType.String;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadPlaceName);
        oprot.WriteFieldEnd();
      }
      if (LoadPortName != null && __isset.loadPortName) {
        field.Name = "loadPortName";
        field.Type = TType.String;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadPortName);
        oprot.WriteFieldEnd();
      }
      if (LoadTerminalName != null && __isset.loadTerminalName) {
        field.Name = "loadTerminalName";
        field.Type = TType.String;
        field.ID = 43;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadTerminalName);
        oprot.WriteFieldEnd();
      }
      if (LoadCountryName != null && __isset.loadCountryName) {
        field.Name = "loadCountryName";
        field.Type = TType.String;
        field.ID = 44;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadCountryName);
        oprot.WriteFieldEnd();
      }
      if (LoadRegionName != null && __isset.loadRegionName) {
        field.Name = "loadRegionName";
        field.Type = TType.String;
        field.ID = 45;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadRegionName);
        oprot.WriteFieldEnd();
      }
      if (LoadAltRegionName != null && __isset.loadAltRegionName) {
        field.Name = "loadAltRegionName";
        field.Type = TType.String;
        field.ID = 46;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadAltRegionName);
        oprot.WriteFieldEnd();
      }
      if (LoadRegionGroupName != null && __isset.loadRegionGroupName) {
        field.Name = "loadRegionGroupName";
        field.Type = TType.String;
        field.ID = 47;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadRegionGroupName);
        oprot.WriteFieldEnd();
      }
      if (LoadEconomicGroup != null && __isset.loadEconomicGroup) {
        field.Name = "loadEconomicGroup";
        field.Type = TType.String;
        field.ID = 48;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadEconomicGroup);
        oprot.WriteFieldEnd();
      }
      if (DestPlaceID != null && __isset.destPlaceID) {
        field.Name = "destPlaceID";
        field.Type = TType.String;
        field.ID = 49;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestPlaceID);
        oprot.WriteFieldEnd();
      }
      if (DestPlaceType != null && __isset.destPlaceType) {
        field.Name = "destPlaceType";
        field.Type = TType.String;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestPlaceType);
        oprot.WriteFieldEnd();
      }
      if (DestPlaceName != null && __isset.destPlaceName) {
        field.Name = "destPlaceName";
        field.Type = TType.String;
        field.ID = 51;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestPlaceName);
        oprot.WriteFieldEnd();
      }
      if (DestPortName != null && __isset.destPortName) {
        field.Name = "destPortName";
        field.Type = TType.String;
        field.ID = 52;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestPortName);
        oprot.WriteFieldEnd();
      }
      if (DestTerminalName != null && __isset.destTerminalName) {
        field.Name = "destTerminalName";
        field.Type = TType.String;
        field.ID = 53;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestTerminalName);
        oprot.WriteFieldEnd();
      }
      if (DestCountryName != null && __isset.destCountryName) {
        field.Name = "destCountryName";
        field.Type = TType.String;
        field.ID = 54;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestCountryName);
        oprot.WriteFieldEnd();
      }
      if (DestRegionName != null && __isset.destRegionName) {
        field.Name = "destRegionName";
        field.Type = TType.String;
        field.ID = 55;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestRegionName);
        oprot.WriteFieldEnd();
      }
      if (DestAltRegionName != null && __isset.destAltRegionName) {
        field.Name = "destAltRegionName";
        field.Type = TType.String;
        field.ID = 56;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestAltRegionName);
        oprot.WriteFieldEnd();
      }
      if (DestRegionGroupName != null && __isset.destRegionGroupName) {
        field.Name = "destRegionGroupName";
        field.Type = TType.String;
        field.ID = 57;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestRegionGroupName);
        oprot.WriteFieldEnd();
      }
      if (DestEconomicGroup != null && __isset.destEconomicGroup) {
        field.Name = "destEconomicGroup";
        field.Type = TType.String;
        field.ID = 58;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DestEconomicGroup);
        oprot.WriteFieldEnd();
      }
      if (Comment != null && __isset.comment) {
        field.Name = "comment";
        field.Type = TType.String;
        field.ID = 59;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Comment);
        oprot.WriteFieldEnd();
      }
      if (__isset.sharepointID) {
        field.Name = "sharepointID";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SharepointID);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdDate) {
        field.Name = "createdDate";
        field.Type = TType.I64;
        field.ID = 61;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedDate);
        oprot.WriteFieldEnd();
      }
      if (CreatedUser != null && __isset.createdUser) {
        field.Name = "createdUser";
        field.Type = TType.String;
        field.ID = 62;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CreatedUser);
        oprot.WriteFieldEnd();
      }
      if (__isset.billOfLading) {
        field.Name = "billOfLading";
        field.Type = TType.Double;
        field.ID = 63;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(BillOfLading);
        oprot.WriteFieldEnd();
      }
      if (_use != null && __isset._use) {
        field.Name = "_use";
        field.Type = TType.String;
        field.ID = 64;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(_use);
        oprot.WriteFieldEnd();
      }
      if (ArrivalJTW != null && __isset.arrivalJTW) {
        field.Name = "arrivalJTW";
        field.Type = TType.String;
        field.ID = 65;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ArrivalJTW);
        oprot.WriteFieldEnd();
      }
      if (OfferLevel != null && __isset.offerLevel) {
        field.Name = "offerLevel";
        field.Type = TType.String;
        field.ID = 66;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OfferLevel);
        oprot.WriteFieldEnd();
      }
      if (JetVetting != null && __isset.jetVetting) {
        field.Name = "jetVetting";
        field.Type = TType.String;
        field.ID = 67;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JetVetting);
        oprot.WriteFieldEnd();
      }
      if (Dwt != null && __isset.dwt) {
        field.Name = "dwt";
        field.Type = TType.String;
        field.ID = 68;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Dwt);
        oprot.WriteFieldEnd();
      }
      if (ShipName != null && __isset.shipName) {
        field.Name = "shipName";
        field.Type = TType.String;
        field.ID = 69;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ShipName);
        oprot.WriteFieldEnd();
      }
      if (Route != null && __isset.route) {
        field.Name = "route";
        field.Type = TType.String;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Route);
        oprot.WriteFieldEnd();
      }
      if (PastSuez != null && __isset.pastSuez) {
        field.Name = "pastSuez";
        field.Type = TType.String;
        field.ID = 71;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PastSuez);
        oprot.WriteFieldEnd();
      }
      if (Arb != null && __isset.arb) {
        field.Name = "arb";
        field.Type = TType.String;
        field.ID = 72;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Arb);
        oprot.WriteFieldEnd();
      }
      if (DataOrigin != null && __isset.dataOrigin) {
        field.Name = "dataOrigin";
        field.Type = TType.String;
        field.ID = 73;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DataOrigin);
        oprot.WriteFieldEnd();
      }
      if (Options != null && __isset.options) {
        field.Name = "options";
        field.Type = TType.String;
        field.ID = 74;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Options);
        oprot.WriteFieldEnd();
      }
      if (Opec != null && __isset.opec) {
        field.Name = "opec";
        field.Type = TType.String;
        field.ID = 75;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Opec);
        oprot.WriteFieldEnd();
      }
      if (LoadRefineryName != null && __isset.loadRefineryName) {
        field.Name = "loadRefineryName";
        field.Type = TType.String;
        field.ID = 76;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadRefineryName);
        oprot.WriteFieldEnd();
      }
      if (DischargeRefineryName != null && __isset.dischargeRefineryName) {
        field.Name = "dischargeRefineryName";
        field.Type = TType.String;
        field.ID = 77;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DischargeRefineryName);
        oprot.WriteFieldEnd();
      }
      if (Notes != null && __isset.notes) {
        field.Name = "notes";
        field.Type = TType.String;
        field.ID = 78;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Notes);
        oprot.WriteFieldEnd();
      }
      if (__isset.loadDOE) {
        field.Name = "loadDOE";
        field.Type = TType.I64;
        field.ID = 79;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LoadDOE);
        oprot.WriteFieldEnd();
      }
      if (LoadMonth != null && __isset.loadMonth) {
        field.Name = "loadMonth";
        field.Type = TType.String;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LoadMonth);
        oprot.WriteFieldEnd();
      }
      if (__isset.loadWeek) {
        field.Name = "loadWeek";
        field.Type = TType.I32;
        field.ID = 81;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LoadWeek);
        oprot.WriteFieldEnd();
      }
      if (__isset.disDOE) {
        field.Name = "disDOE";
        field.Type = TType.I64;
        field.ID = 82;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DisDOE);
        oprot.WriteFieldEnd();
      }
      if (DisMonth != null && __isset.disMonth) {
        field.Name = "disMonth";
        field.Type = TType.String;
        field.ID = 83;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisMonth);
        oprot.WriteFieldEnd();
      }
      if (__isset.disWeek) {
        field.Name = "disWeek";
        field.Type = TType.I32;
        field.ID = 84;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisWeek);
        oprot.WriteFieldEnd();
      }
      if (__isset.numLoadMonth) {
        field.Name = "numLoadMonth";
        field.Type = TType.I64;
        field.ID = 85;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NumLoadMonth);
        oprot.WriteFieldEnd();
      }
      if (__isset.numDisMonth) {
        field.Name = "numDisMonth";
        field.Type = TType.I64;
        field.ID = 86;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NumDisMonth);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Voyage(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",VesselID: ");
      sb.Append(VesselID);
      sb.Append(",BenchName: ");
      sb.Append(BenchName);
      sb.Append(",VoyageStatusName: ");
      sb.Append(VoyageStatusName);
      sb.Append(",LoadDate: ");
      sb.Append(LoadDate);
      sb.Append(",DischargeDate: ");
      sb.Append(DischargeDate);
      sb.Append(",GradeId: ");
      sb.Append(GradeId);
      sb.Append(",GradeName: ");
      sb.Append(GradeName);
      sb.Append(",GradeGroupName: ");
      sb.Append(GradeGroupName);
      sb.Append(",ConversionRate: ");
      sb.Append(ConversionRate);
      sb.Append(",CrudeDensity: ");
      sb.Append(CrudeDensity);
      sb.Append(",SweetSour: ");
      sb.Append(SweetSour);
      sb.Append(",SubGradeGroupName: ");
      sb.Append(SubGradeGroupName);
      sb.Append(",Kt: ");
      sb.Append(Kt);
      sb.Append(",Bbls: ");
      sb.Append(Bbls);
      sb.Append(",Rate: ");
      sb.Append(Rate);
      sb.Append(",Charterer: ");
      sb.Append(Charterer);
      sb.Append(",EndReceiver: ");
      sb.Append(EndReceiver);
      sb.Append(",Seller: ");
      sb.Append(Seller);
      sb.Append(",Broker: ");
      sb.Append(Broker);
      sb.Append(",Supplier: ");
      sb.Append(Supplier);
      sb.Append(",Chain: ");
      sb.Append(Chain);
      sb.Append(",Buyer: ");
      sb.Append(Buyer);
      sb.Append(",OpenLaycan: ");
      sb.Append(OpenLaycan);
      sb.Append(",CloseLaycan: ");
      sb.Append(CloseLaycan);
      sb.Append(",PrimaryVoyageID: ");
      sb.Append(PrimaryVoyageID);
      sb.Append(",UpdatedUser: ");
      sb.Append(UpdatedUser);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",StreamName: ");
      sb.Append(StreamName);
      sb.Append(",Deleted: ");
      sb.Append(Deleted);
      sb.Append(",Source: ");
      sb.Append(Source);
      sb.Append(",Duplicate: ");
      sb.Append(Duplicate);
      sb.Append(",AliasVoyageId: ");
      sb.Append(AliasVoyageId);
      sb.Append(",LoadRefineryID: ");
      sb.Append(LoadRefineryID);
      sb.Append(",DisRefineryID: ");
      sb.Append(DisRefineryID);
      sb.Append(",C3: ");
      sb.Append(C3);
      sb.Append(",C4: ");
      sb.Append(C4);
      sb.Append(",LPG: ");
      sb.Append(LPG);
      sb.Append(",LoadPlaceID: ");
      sb.Append(LoadPlaceID);
      sb.Append(",LoadPlaceType: ");
      sb.Append(LoadPlaceType);
      sb.Append(",LoadPlaceName: ");
      sb.Append(LoadPlaceName);
      sb.Append(",LoadPortName: ");
      sb.Append(LoadPortName);
      sb.Append(",LoadTerminalName: ");
      sb.Append(LoadTerminalName);
      sb.Append(",LoadCountryName: ");
      sb.Append(LoadCountryName);
      sb.Append(",LoadRegionName: ");
      sb.Append(LoadRegionName);
      sb.Append(",LoadAltRegionName: ");
      sb.Append(LoadAltRegionName);
      sb.Append(",LoadRegionGroupName: ");
      sb.Append(LoadRegionGroupName);
      sb.Append(",LoadEconomicGroup: ");
      sb.Append(LoadEconomicGroup);
      sb.Append(",DestPlaceID: ");
      sb.Append(DestPlaceID);
      sb.Append(",DestPlaceType: ");
      sb.Append(DestPlaceType);
      sb.Append(",DestPlaceName: ");
      sb.Append(DestPlaceName);
      sb.Append(",DestPortName: ");
      sb.Append(DestPortName);
      sb.Append(",DestTerminalName: ");
      sb.Append(DestTerminalName);
      sb.Append(",DestCountryName: ");
      sb.Append(DestCountryName);
      sb.Append(",DestRegionName: ");
      sb.Append(DestRegionName);
      sb.Append(",DestAltRegionName: ");
      sb.Append(DestAltRegionName);
      sb.Append(",DestRegionGroupName: ");
      sb.Append(DestRegionGroupName);
      sb.Append(",DestEconomicGroup: ");
      sb.Append(DestEconomicGroup);
      sb.Append(",Comment: ");
      sb.Append(Comment);
      sb.Append(",SharepointID: ");
      sb.Append(SharepointID);
      sb.Append(",CreatedDate: ");
      sb.Append(CreatedDate);
      sb.Append(",CreatedUser: ");
      sb.Append(CreatedUser);
      sb.Append(",BillOfLading: ");
      sb.Append(BillOfLading);
      sb.Append(",_use: ");
      sb.Append(_use);
      sb.Append(",ArrivalJTW: ");
      sb.Append(ArrivalJTW);
      sb.Append(",OfferLevel: ");
      sb.Append(OfferLevel);
      sb.Append(",JetVetting: ");
      sb.Append(JetVetting);
      sb.Append(",Dwt: ");
      sb.Append(Dwt);
      sb.Append(",ShipName: ");
      sb.Append(ShipName);
      sb.Append(",Route: ");
      sb.Append(Route);
      sb.Append(",PastSuez: ");
      sb.Append(PastSuez);
      sb.Append(",Arb: ");
      sb.Append(Arb);
      sb.Append(",DataOrigin: ");
      sb.Append(DataOrigin);
      sb.Append(",Options: ");
      sb.Append(Options);
      sb.Append(",Opec: ");
      sb.Append(Opec);
      sb.Append(",LoadRefineryName: ");
      sb.Append(LoadRefineryName);
      sb.Append(",DischargeRefineryName: ");
      sb.Append(DischargeRefineryName);
      sb.Append(",Notes: ");
      sb.Append(Notes);
      sb.Append(",LoadDOE: ");
      sb.Append(LoadDOE);
      sb.Append(",LoadMonth: ");
      sb.Append(LoadMonth);
      sb.Append(",LoadWeek: ");
      sb.Append(LoadWeek);
      sb.Append(",DisDOE: ");
      sb.Append(DisDOE);
      sb.Append(",DisMonth: ");
      sb.Append(DisMonth);
      sb.Append(",DisWeek: ");
      sb.Append(DisWeek);
      sb.Append(",NumLoadMonth: ");
      sb.Append(NumLoadMonth);
      sb.Append(",NumDisMonth: ");
      sb.Append(NumDisMonth);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
