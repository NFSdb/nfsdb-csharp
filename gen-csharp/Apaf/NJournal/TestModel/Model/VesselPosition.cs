/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apaf.NJournal.TestModel.Model
{

  [Serializable]
  public partial class VesselPosition : TBase
  {
    private string _imo;
    private string _name;
    private double _lat;
    private double _lon;
    private double _angle;
    private double _speed;
    private string _status;
    private double _draught;
    private string _dest;
    private long _timestamp;
    private int _stationaryMinutes;
    private string _feed;
    private long _eta;
    private double _quality;

    public string Imo
    {
      get
      {
        return _imo;
      }
      set
      {
        __isset.imo = true;
        this._imo = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public double Lat
    {
      get
      {
        return _lat;
      }
      set
      {
        __isset.lat = true;
        this._lat = value;
      }
    }

    public double Lon
    {
      get
      {
        return _lon;
      }
      set
      {
        __isset.lon = true;
        this._lon = value;
      }
    }

    public double Angle
    {
      get
      {
        return _angle;
      }
      set
      {
        __isset.angle = true;
        this._angle = value;
      }
    }

    public double Speed
    {
      get
      {
        return _speed;
      }
      set
      {
        __isset.speed = true;
        this._speed = value;
      }
    }

    public string Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }

    public double Draught
    {
      get
      {
        return _draught;
      }
      set
      {
        __isset.draught = true;
        this._draught = value;
      }
    }

    public string Dest
    {
      get
      {
        return _dest;
      }
      set
      {
        __isset.dest = true;
        this._dest = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public int StationaryMinutes
    {
      get
      {
        return _stationaryMinutes;
      }
      set
      {
        __isset.stationaryMinutes = true;
        this._stationaryMinutes = value;
      }
    }

    public string Feed
    {
      get
      {
        return _feed;
      }
      set
      {
        __isset.feed = true;
        this._feed = value;
      }
    }

    public long Eta
    {
      get
      {
        return _eta;
      }
      set
      {
        __isset.eta = true;
        this._eta = value;
      }
    }

    public double Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool imo;
      public bool name;
      public bool lat;
      public bool lon;
      public bool angle;
      public bool speed;
      public bool status;
      public bool draught;
      public bool dest;
      public bool timestamp;
      public bool stationaryMinutes;
      public bool feed;
      public bool eta;
      public bool quality;
    }

    public VesselPosition() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Imo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Lat = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Lon = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Angle = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              Speed = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Status = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Double) {
              Draught = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Dest = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              StationaryMinutes = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              Feed = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              Eta = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Double) {
              Quality = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("VesselPosition");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Imo != null && __isset.imo) {
        field.Name = "imo";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Imo);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.lat) {
        field.Name = "lat";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Lat);
        oprot.WriteFieldEnd();
      }
      if (__isset.lon) {
        field.Name = "lon";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Lon);
        oprot.WriteFieldEnd();
      }
      if (__isset.angle) {
        field.Name = "angle";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Angle);
        oprot.WriteFieldEnd();
      }
      if (__isset.speed) {
        field.Name = "speed";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Speed);
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Status);
        oprot.WriteFieldEnd();
      }
      if (__isset.draught) {
        field.Name = "draught";
        field.Type = TType.Double;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Draught);
        oprot.WriteFieldEnd();
      }
      if (Dest != null && __isset.dest) {
        field.Name = "dest";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Dest);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.stationaryMinutes) {
        field.Name = "stationaryMinutes";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StationaryMinutes);
        oprot.WriteFieldEnd();
      }
      if (Feed != null && __isset.feed) {
        field.Name = "feed";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Feed);
        oprot.WriteFieldEnd();
      }
      if (__isset.eta) {
        field.Name = "eta";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Eta);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.Double;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Quality);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("VesselPosition(");
      sb.Append("Imo: ");
      sb.Append(Imo);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Lat: ");
      sb.Append(Lat);
      sb.Append(",Lon: ");
      sb.Append(Lon);
      sb.Append(",Angle: ");
      sb.Append(Angle);
      sb.Append(",Speed: ");
      sb.Append(Speed);
      sb.Append(",Status: ");
      sb.Append(Status);
      sb.Append(",Draught: ");
      sb.Append(Draught);
      sb.Append(",Dest: ");
      sb.Append(Dest);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",StationaryMinutes: ");
      sb.Append(StationaryMinutes);
      sb.Append(",Feed: ");
      sb.Append(Feed);
      sb.Append(",Eta: ");
      sb.Append(Eta);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
