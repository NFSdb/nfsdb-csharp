/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apaf.NJournal.TestModel.Model
{

  [Serializable]
  public partial class VesselPortVisit : TBase
  {
    private string _imo;
    private string _port;
    private long _startTimestamp;
    private long _endTimestamp;
    private double _draught;

    public string Imo
    {
      get
      {
        return _imo;
      }
      set
      {
        __isset.imo = true;
        this._imo = value;
      }
    }

    public string Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        this._port = value;
      }
    }

    public long StartTimestamp
    {
      get
      {
        return _startTimestamp;
      }
      set
      {
        __isset.startTimestamp = true;
        this._startTimestamp = value;
      }
    }

    public long EndTimestamp
    {
      get
      {
        return _endTimestamp;
      }
      set
      {
        __isset.endTimestamp = true;
        this._endTimestamp = value;
      }
    }

    public double Draught
    {
      get
      {
        return _draught;
      }
      set
      {
        __isset.draught = true;
        this._draught = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool imo;
      public bool port;
      public bool startTimestamp;
      public bool endTimestamp;
      public bool draught;
    }

    public VesselPortVisit() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Imo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Port = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Draught = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("VesselPortVisit");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Imo != null && __isset.imo) {
        field.Name = "imo";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Imo);
        oprot.WriteFieldEnd();
      }
      if (Port != null && __isset.port) {
        field.Name = "port";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Port);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTimestamp) {
        field.Name = "startTimestamp";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTimestamp) {
        field.Name = "endTimestamp";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTimestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.draught) {
        field.Name = "draught";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Draught);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("VesselPortVisit(");
      sb.Append("Imo: ");
      sb.Append(Imo);
      sb.Append(",Port: ");
      sb.Append(Port);
      sb.Append(",StartTimestamp: ");
      sb.Append(StartTimestamp);
      sb.Append(",EndTimestamp: ");
      sb.Append(EndTimestamp);
      sb.Append(",Draught: ");
      sb.Append(Draught);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
