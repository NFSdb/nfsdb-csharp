#region copyright
/*
 * Copyright (c) 2014. APAF (Alex Pelagenko).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#endregion
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Apaf.NFSdb.Core.Column;
using Apaf.NFSdb.Core.Storage;
using Thrift;
using Thrift.Protocol;
namespace Apaf.NFSdb.Tests.Columns.ThriftModel
{

  [Serializable]
  public partial class Quote : TBase
  {
    private long _timestamp;
    private string _sym;
    private double _bid;
    private double _ask;
    private int _bidSize;
    private int _askSize;
    private string _mode;
    private string _ex;


    public static object GenerateItem(ByteArray bitset, IFixedWidthColumn[] fixdCols,
        long rowid, IStringColumn[] stringColumns, IReadContext readContext)
    {
        var q = new Quote();
        string strVal;
        if (bitset.IsSet(0))
        {
            q._askSize = fixdCols[0].GetInt32(rowid);
            q.__isset.askSize = true;
        }

        strVal = stringColumns[0].GetString(rowid, readContext);
        if (strVal != null)
        {
            q.Mode = strVal;
        }

        if (bitset.IsSet(2))
        {
            q._timestamp = fixdCols[1].GetInt64(rowid);
            q.__isset.timestamp = true;
        }

        strVal = stringColumns[1].GetString(rowid, readContext);
        if (strVal != null)
        {
            q.Sym = strVal;
        }
        return q;
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public string Sym
    {
      get
      {
        return _sym;
      }
      set
      {
        __isset.sym = true;
        this._sym = value;
      }
    }

    public double Bid
    {
      get
      {
        return _bid;
      }
      set
      {
        __isset.bid = true;
        this._bid = value;
      }
    }

    public double Ask
    {
      get
      {
        return _ask;
      }
      set
      {
        __isset.ask = true;
        this._ask = value;
      }
    }

    public int BidSize
    {
      get
      {
        return _bidSize;
      }
      set
      {
        __isset.bidSize = true;
        this._bidSize = value;
      }
    }

    public int AskSize
    {
      get
      {
        return _askSize;
      }
      set
      {
        __isset.askSize = true;
        this._askSize = value;
      }
    }

    public string Mode
    {
      get
      {
        return _mode;
      }
      set
      {
        __isset.mode = true;
        this._mode = value;
      }
    }

    public string Ex
    {
      get
      {
        return _ex;
      }
      set
      {
        __isset.ex = true;
        this._ex = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool timestamp;
      public bool sym;
      public bool bid;
      public bool ask;
      public bool bidSize;
      public bool askSize;
      public bool mode;
      public bool ex;
    }

    public Quote() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Sym = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Bid = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Ask = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              BidSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              AskSize = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Mode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Ex = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Quote");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (Sym != null && __isset.sym) {
        field.Name = "sym";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sym);
        oprot.WriteFieldEnd();
      }
      if (__isset.bid) {
        field.Name = "bid";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Bid);
        oprot.WriteFieldEnd();
      }
      if (__isset.ask) {
        field.Name = "ask";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Ask);
        oprot.WriteFieldEnd();
      }
      if (__isset.bidSize) {
        field.Name = "bidSize";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BidSize);
        oprot.WriteFieldEnd();
      }
      if (__isset.askSize) {
        field.Name = "askSize";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AskSize);
        oprot.WriteFieldEnd();
      }
      if (Mode != null && __isset.mode) {
        field.Name = "mode";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mode);
        oprot.WriteFieldEnd();
      }
      if (Ex != null && __isset.ex) {
        field.Name = "ex";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Ex);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Quote(");
      sb.Append("Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Sym: ");
      sb.Append(Sym);
      sb.Append(",Bid: ");
      sb.Append(Bid);
      sb.Append(",Ask: ");
      sb.Append(Ask);
      sb.Append(",BidSize: ");
      sb.Append(BidSize);
      sb.Append(",AskSize: ");
      sb.Append(AskSize);
      sb.Append(",Mode: ");
      sb.Append(Mode);
      sb.Append(",Ex: ");
      sb.Append(Ex);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
