/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace Apaf.NFSdb.TestModel.Model
{

  [Serializable]
  public partial class PlaceGraph : TBase
  {
    private string _subj;
    private string _subjType;
    private string _predicate;
    private string _obj;
    private string _objType;
    private long _timestamp;
    private bool _deleted;

    public string Subj
    {
      get
      {
        return _subj;
      }
      set
      {
        __isset.subj = true;
        this._subj = value;
      }
    }

    public string SubjType
    {
      get
      {
        return _subjType;
      }
      set
      {
        __isset.subjType = true;
        this._subjType = value;
      }
    }

    public string Predicate
    {
      get
      {
        return _predicate;
      }
      set
      {
        __isset.predicate = true;
        this._predicate = value;
      }
    }

    public string Obj
    {
      get
      {
        return _obj;
      }
      set
      {
        __isset.obj = true;
        this._obj = value;
      }
    }

    public string ObjType
    {
      get
      {
        return _objType;
      }
      set
      {
        __isset.objType = true;
        this._objType = value;
      }
    }

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }

    public bool Deleted
    {
      get
      {
        return _deleted;
      }
      set
      {
        __isset.deleted = true;
        this._deleted = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool subj;
      public bool subjType;
      public bool predicate;
      public bool obj;
      public bool objType;
      public bool timestamp;
      public bool deleted;
    }

    public PlaceGraph() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Subj = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              SubjType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Predicate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Obj = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ObjType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Timestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              Deleted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlaceGraph");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Subj != null && __isset.subj) {
        field.Name = "subj";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Subj);
        oprot.WriteFieldEnd();
      }
      if (SubjType != null && __isset.subjType) {
        field.Name = "subjType";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SubjType);
        oprot.WriteFieldEnd();
      }
      if (Predicate != null && __isset.predicate) {
        field.Name = "predicate";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Predicate);
        oprot.WriteFieldEnd();
      }
      if (Obj != null && __isset.obj) {
        field.Name = "obj";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Obj);
        oprot.WriteFieldEnd();
      }
      if (ObjType != null && __isset.objType) {
        field.Name = "objType";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ObjType);
        oprot.WriteFieldEnd();
      }
      if (__isset.timestamp) {
        field.Name = "timestamp";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Timestamp);
        oprot.WriteFieldEnd();
      }
      if (__isset.deleted) {
        field.Name = "deleted";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Deleted);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlaceGraph(");
      sb.Append("Subj: ");
      sb.Append(Subj);
      sb.Append(",SubjType: ");
      sb.Append(SubjType);
      sb.Append(",Predicate: ");
      sb.Append(Predicate);
      sb.Append(",Obj: ");
      sb.Append(Obj);
      sb.Append(",ObjType: ");
      sb.Append(ObjType);
      sb.Append(",Timestamp: ");
      sb.Append(Timestamp);
      sb.Append(",Deleted: ");
      sb.Append(Deleted);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
